import type {
  LineMessage,
  LineQuickReply,
  LineFlexBubble,
  LineBox,
  LineBoxButton,
  LineActionPostback,
  LineActionMessage,
  LineActionURI,
} from "@/server/types/line";
import type { SignupProgress } from "@/server/agent/signupFlow";
import type { BookingProgress } from "@/server/agent/bookingFlow";
import type { BookingRow, BookingSessionRow } from "@/server/repo/bookings";
import type { UserRow } from "@/server/repo/users";

// ---- THEME TOKENS ----------------------------------------------------------
const BRAND = {
  primary: "#46688b",
  accent: "#78b54a",
  muted: "#6B7280",
  white: "#FFFFFF",
  surface: "#F6F8FB",
};

// ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
function brandHeader(title: string, subtitle?: string): LineBox {
  return {
    type: "box",
    layout: "vertical",
    paddingAll: "16px",
    backgroundColor: BRAND.primary,
    contents: [
      {
        type: "text",
        text: title,
        weight: "bold",
        size: "lg",
        color: BRAND.white,
      },
      ...(subtitle
        ? [
            {
              type: "text",
              text: subtitle,
              size: "xs",
              color: "#DFE8F3",
              margin: "sm",
            },
          ]
        : []),
    ],
  };
}

// ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥) + ‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function infoRow(
  icon: string,
  text: string,
  size: "sm" | "xs" = "sm"
): LineBox {
  return {
    type: "box",
    layout: "baseline",
    spacing: "sm",
    contents: [
      { type: "text", text: icon, size, flex: 0 },
      { type: "text", text, size, wrap: true, color: BRAND.muted },
    ],
  };
}

// ‡∏õ‡∏∏‡πà‡∏° primary / secondary ‡∏ó‡∏µ‡πà‡∏Ñ‡∏á spec LINE
function primaryBtn(
  action: LineActionPostback | LineActionMessage | LineActionURI
): LineBoxButton {
  return { type: "button", style: "primary", color: BRAND.primary, action };
}
function secondaryBtn(
  action: LineActionPostback | LineActionMessage | LineActionURI
): LineBoxButton {
  return { type: "button", style: "secondary", action };
}

// ---- QUICK REPLY (‡πÄ‡∏î‡∏¥‡∏°) ----------------------------------------------------
export function quickReplyMenu(): LineQuickReply {
  return {
    items: [
      {
        type: "action",
        action: { type: "message", label: "‡πÄ‡∏°‡∏ô‡∏π", text: "‡πÄ‡∏°‡∏ô‡∏π" },
      },
      {
        type: "action",
        action: { type: "message", label: "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î", text: "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î" },
      },
      {
        type: "action",
        action: { type: "message", label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£", text: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£" },
      },
    ],
  };
}

// ---- WELCOME ---------------------------------------------------------------
export function welcomeFlex(): LineMessage {
  const liffId = process.env.NEXT_PUBLIC_LIFF_ID;
  const signupAction = liffId
    ? {
        type: "uri" as const,
        label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
        uri: `https://liff.line.me/${liffId}?mode=signup`,
      }
    : {
        type: "postback" as const,
        label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
        data: JSON.stringify({ mode: "signup_start" }),
      };
  const bookingAction = liffId
    ? {
        type: "uri" as const,
        label: "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î",
        uri: `https://liff.line.me/${liffId}?mode=booking`,
      }
    : {
        type: "postback" as const,
        label: "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î",
        data: JSON.stringify({ mode: "booking_start" }),
      };

  return {
    type: "flex",
    altText: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Labmove",
    contents: {
      type: "bubble",
      header: brandHeader(
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Labmove",
        "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≤‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô ‚Ä¢ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"
      ),
      body: {
        type: "box",
        layout: "vertical",
        paddingAll: "16px",
        backgroundColor: BRAND.white,
        spacing: "md",
        contents: [
          {
            type: "box",
            layout: "vertical",
            backgroundColor: BRAND.surface,
            paddingAll: "12px",
            spacing: "sm",
            contents: [
              {
                type: "text",
                text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
                weight: "bold",
                size: "md",
              },
              { type: "separator", margin: "md" },
              infoRow("üÜî", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
              infoRow("üìÖ", "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô"),
              infoRow("üîî", "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"),
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "horizontal",
        spacing: "sm",
        contents: [primaryBtn(signupAction), secondaryBtn(bookingAction)],
      },
      styles: { footer: { separator: true } },
    } as LineFlexBubble,
  };
}

// ---- OPEN LIFF PROMPT ------------------------------------------------------
export function openLiffPromptFlex(mode: "signup" | "booking"): LineMessage {
  const liffId = process.env.NEXT_PUBLIC_LIFF_ID;
  const label = mode === "signup" ? "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" : "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î";
  const title = mode === "signup" ? "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" : "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î";
  const action = liffId
    ? {
        type: "uri" as const,
        label,
        uri: `https://liff.line.me/${liffId}?mode=${mode}`,
      }
    : {
        type: "postback" as const,
        label,
        data: JSON.stringify({ mode: `${mode}_start` }),
      };

  return {
    type: "flex",
    altText: label,
    contents: {
      type: "bubble",
      header: brandHeader(title),
      body: {
        type: "box",
        layout: "vertical",
        paddingAll: "16px",
        contents: [
          {
            type: "text",
            text:
              mode === "signup"
                ? "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô LIFF"
                : "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡πÉ‡∏ô LIFF",
            size: "sm",
            wrap: true,
            color: BRAND.muted,
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [primaryBtn(action)],
      },
    } as LineFlexBubble,
  };
}

// ---- CONSENT CONFIRM (‡πÄ‡∏î‡∏¥‡∏°) -----------------------------------------------
export function consentConfirm(): LineMessage {
  return {
    type: "template",
    altText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    template: {
      type: "confirm",
      text: "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      actions: [
        {
          type: "postback",
          label: "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
          data: JSON.stringify({ action: "consent_yes" }),
          displayText: "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
        },
        {
          type: "postback",
          label: "‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
          data: JSON.stringify({ action: "consent_no" }),
          displayText: "‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
        },
      ],
    },
  };
}

// ---- SIGNUP SUMMARY --------------------------------------------------------
export function signupSummaryFlex(p: SignupProgress): LineMessage {
  return {
    type: "flex",
    altText: "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
    contents: {
      type: "bubble",
      header: brandHeader("‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"),
      body: {
        type: "box",
        layout: "vertical",
        paddingAll: "16px",
        spacing: "sm",
        contents: [
          {
            type: "box",
            layout: "vertical",
            backgroundColor: BRAND.surface,
            paddingAll: "12px",
            spacing: "xs",
            contents: [
              infoRow("‚úÖ", `‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°: ${p.consent ? "‡πÉ‡∏ä‡πà" : "‡πÑ‡∏°‡πà"}`),
              infoRow("üë§", `‡∏ä‡∏∑‡πà‡∏≠: ${p.name || "-"}`),
              infoRow("üìû", `‡πÇ‡∏ó‡∏£: ${p.phone || "-"}`),
              infoRow("ü©∫", `HN: ${p.hn || "-"}`),
              infoRow("üè•", `‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: ${p.hospital || "-"}`),
              infoRow("üß©", `‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${p.referral || "-"}`, "xs"),
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "horizontal",
        spacing: "sm",
        contents: [
          primaryBtn({
            type: "postback",
            label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
            data: JSON.stringify({ action: "signup_confirm" }),
          }),
          secondaryBtn({
            type: "postback",
            label: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
            data: JSON.stringify({ action: "signup_edit" }),
          }),
        ],
      },
      styles: { footer: { separator: true } },
    } as LineFlexBubble,
  };
}

// ---- BOOKING SUMMARY -------------------------------------------------------
export function bookingSummaryFlex(
  p: BookingProgress & { lat?: number; lng?: number }
): LineMessage {
  const wish =
    (p as BookingProgress & { datePreference?: string }).datePreference ||
    p.bookingDate ||
    "-";
  return {
    type: "flex",
    altText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
    contents: {
      type: "bubble",
      header: brandHeader("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"),
      body: {
        type: "box",
        layout: "vertical",
        paddingAll: "16px",
        spacing: "sm",
        contents: [
          {
            type: "box",
            layout: "vertical",
            backgroundColor: BRAND.surface,
            paddingAll: "12px",
            spacing: "xs",
            contents: [
              infoRow("üìÖ", `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${wish}`),
              infoRow("üìç", `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${p.address || "-"}`),
              infoRow(
                "üó∫Ô∏è",
                (p.lat ?? "") && (p.lng ?? "") ? `${p.lat}, ${p.lng}` : "-",
                "xs"
              ),
              infoRow("üìù", `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${p.note || "-"}`),
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          primaryBtn({
            type: "postback",
            label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
            data: JSON.stringify({ action: "booking_confirm" }),
          }),
          secondaryBtn({
            type: "postback",
            label: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô",
            data: JSON.stringify({ action: "booking_edit_date" }),
          }),
          secondaryBtn({
            type: "postback",
            label: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
            data: JSON.stringify({ action: "booking_edit_address" }),
          }),
        ],
      },
      styles: { footer: { separator: true } },
    } as LineFlexBubble,
  };
}

// ---- BOOKING DETAILS -------------------------------------------------------
export function bookingDetailsFlex(
  p: Partial<BookingRow & BookingSessionRow>
): LineMessage {
  return {
    type: "flex",
    altText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    contents: {
      type: "bubble",
      header: brandHeader(
        "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
        p.status ? `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${p.status}` : undefined
      ),
      body: {
        type: "box",
        layout: "vertical",
        paddingAll: "16px",
        spacing: "sm",
        contents: [
          {
            type: "box",
            layout: "vertical",
            backgroundColor: BRAND.surface,
            paddingAll: "12px",
            spacing: "xs",
            contents: [
              infoRow(
                "üìÖ",
                `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î: ${p.bookingDate || p.datePreference || "-"}`
              ),
              infoRow("üìç", p.address ? `${p.address}` : "-"),
              infoRow(
                "üó∫Ô∏è",
                p.lat != null && p.lng != null ? `${p.lat}, ${p.lng}` : "-",
                "xs"
              ),
              ...(p.note ? [infoRow("üìù", `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${p.note}`)] : []),
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "horizontal",
        spacing: "sm",
        contents: [
          secondaryBtn({
            type: "postback",
            label: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô",
            data: JSON.stringify({ action: "booking_edit_date" }),
          }),
          secondaryBtn({
            type: "postback",
            label: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
            data: JSON.stringify({ action: "booking_edit_address" }),
          }),
        ],
      },
      styles: { footer: { separator: true } },
    } as LineFlexBubble,
  };
}

// ---- PROFILE LIST ----------------------------------------------------------
export function profileListFlex(members: UserRow[]): LineMessage {
  const renderBubble = (m: UserRow) => ({
    type: "bubble" as const,
    header: brandHeader("‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"),
    body: {
      type: "box" as const,
      layout: "vertical" as const,
      paddingAll: "16px",
      spacing: "sm",
      contents: [
        {
          type: "box",
          layout: "vertical",
          backgroundColor: BRAND.surface,
          paddingAll: "12px",
          spacing: "xs",
          contents: [
            {
              type: "text",
              text: m.name || "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠)",
              weight: "bold",
              size: "md",
            },
            infoRow("üìû", `‡πÇ‡∏ó‡∏£: ${m.phone || "-"}`, "xs"),
            infoRow("ü©∫", `HN: ${m.hn || "-"}`, "xs"),
            infoRow("üè•", `‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: ${m.hospital || "-"}`, "xs"),
          ],
        },
      ],
    },
    footer: {
      type: "box",
      layout: "horizontal",
      spacing: "sm",
      contents: [
        ...(m.phone
          ? [secondaryBtn({ type: "uri", label: "‡πÇ‡∏ó‡∏£", uri: `tel:${m.phone}` })]
          : []),
        secondaryBtn({
          type: "postback",
          label: "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î",
          data: JSON.stringify({
            action: "booking_start_for",
            userId: m.lineUserId,
          }),
        }),
      ],
    },
    styles: { footer: { separator: true } },
  });

  const list = members.slice(-10);
  if (list.length <= 1) {
    const m = list[0] || members[0];
    return {
      type: "flex",
      altText: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
      contents: renderBubble(m) as LineFlexBubble,
    };
  }
  return {
    type: "flex",
    altText: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô",
    contents: {
      type: "carousel",
      contents: list.map((m) => renderBubble(m) as LineFlexBubble),
    },
  };
}
