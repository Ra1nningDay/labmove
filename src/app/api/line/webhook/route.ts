import { NextRequest, NextResponse } from "next/server";
import { verifyLineSignature, replyMessage } from "@/server/line";
import { getUserMeta, upsertUserMeta } from "@/server/store/session";
import { handleChat } from "@/server/agent/router";
import type { LineWebhookEvent, LineMessageText } from "@/server/types/line";
import {
  quickReplyMenu,
  welcomeFlex,
  consentConfirm,
  bookingDetailsFlex,
  profileListFlex,
} from "@/server/lineMessages";
import { handleLocation, forceBookingStep } from "@/server/agent/router";
import {
  getLatestBookingByUserId,
  getBookingSessionByUserId,
} from "@/server/repo/bookings";
import { findUsersByLineId } from "@/server/repo/users";
// Side effects (saving users/bookings, sessions) are handled inside router

export const dynamic = "force-dynamic";

export async function POST(req: NextRequest) {
  const raw = await req.text();
  // console.log("LINE Webhook received:", raw);
  const ok = verifyLineSignature(
    raw,
    req.headers.get("x-line-signature") || ""
  );
  if (!ok) return new NextResponse("Invalid signature", { status: 401 });

  let body: { events?: LineWebhookEvent[] };
  try {
    body = JSON.parse(raw);
  } catch {
    return new NextResponse("Bad JSON", { status: 400 });
  }

  const events = body.events || [];
  for (const ev of events) {
    // Extract userId safely with type checking
    const userId =
      ev.source && "userId" in ev.source ? ev.source.userId : undefined;

    // Skip events without userId (group/room events without user context)
    if (!userId) continue;

    // Skip events that don't support replies (like unfollow)
    if (!("replyToken" in ev) || !ev.replyToken) continue;

    const replyToken = ev.replyToken;

    if (ev.type === "follow") {
      await replyMessage(replyToken, [
        welcomeFlex(),
        {
          type: "text",
          text: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏°‡∏±‡∏Ñ‡∏£' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
          quickReply: quickReplyMenu(),
        },
      ]);
      continue;
    }

    if (ev.type === "postback") {
      const dataStr = ev.postback.data || "";
      let payload: Record<string, string> = {};
      try {
        payload = JSON.parse(dataStr);
      } catch {
        const parsedPayload: Record<string, string> = {};
        dataStr.split("&").forEach((pair) => {
          const [k, v] = pair.split("=");
          if (k)
            parsedPayload[decodeURIComponent(k)] = decodeURIComponent(v || "");
        });
        payload = parsedPayload;
      }

      if (payload.mode === "signup_start") {
        await handleChat(userId, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£");
        await replyMessage(replyToken, [
          consentConfirm(),
          {
            type: "text",
            text: "‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
            quickReply: quickReplyMenu(),
          },
        ]);
        continue;
      }
      if (payload.mode === "booking_start") {
        const messages = await handleChat(userId, "‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏±‡∏î",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }
      if (payload.action === "consent_yes") {
        const messages = await handleChat(userId, "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }
      if (payload.action === "consent_no") {
        const messages = await handleChat(userId, "‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }

      if (payload.action === "signup_confirm") {
        const messages = await handleChat(userId, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }
      if (payload.action === "signup_edit") {
        const messages = await handleChat(userId, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏´‡∏°‡πà",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏´‡∏°‡πà",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }

      if (payload.action === "booking_confirm") {
        const messages = await handleChat(userId, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }

      if (payload.action === "booking_edit_date") {
        const messages = await forceBookingStep(userId, "date_pref");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 2025-12-01",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }
      if (payload.action === "booking_edit_address") {
        const messages = await forceBookingStep(userId, "address");
        if (messages.length === 0)
          messages.push({
            type: "text",
            text: "‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà",
            quickReply: quickReplyMenu(),
          });
        else if (messages[messages.length - 1].type === "text")
          (messages[messages.length - 1] as LineMessageText).quickReply =
            quickReplyMenu();
        else
          messages.push({
            type: "text",
            text: "‡∏™‡πà‡∏á Location ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏πüìé‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
            quickReply: quickReplyMenu(),
          });
        await replyMessage(replyToken, messages);
        continue;
      }

      if (payload.action === "booking_details") {
        // Try latest booking; fall back to session
        const latest =
          (await getLatestBookingByUserId(userId)) ||
          (await getBookingSessionByUserId(userId));
        const msg = latest
          ? bookingDetailsFlex(latest)
          : ({
              type: "text",
              text: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
              quickReply: quickReplyMenu(),
            } as const);
        await replyMessage(replyToken, [msg]);
        continue;
      }

      if (payload.action === "profile_show") {
        const members = await findUsersByLineId(userId);
        const msg =
          members.length > 0
            ? profileListFlex(members)
            : ({
                type: "text",
                text: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î LIFF ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
                quickReply: quickReplyMenu(),
              } as const);
        await replyMessage(replyToken, [msg]);
        continue;
      }

      await replyMessage(replyToken, [
        {
          type: "text",
          text: "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏î '‡πÄ‡∏°‡∏ô‡∏π' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°",
          quickReply: quickReplyMenu(),
        },
      ]);
      continue;
    }

    if (ev.type === "message" && ev.message.type === "text") {
      // Idempotency: skip duplicate message IDs
      const meta = getUserMeta(userId);
      const messageId = ev.message.id;
      if (meta?.lastEventId === messageId) continue;

      const messages = await handleChat(userId, ev.message.text);
      upsertUserMeta(userId, { lastEventId: messageId });
      if (messages.length === 0)
        messages.push({ type: "text", text: "", quickReply: quickReplyMenu() });
      else if (messages[messages.length - 1].type === "text")
        (messages[messages.length - 1] as LineMessageText).quickReply =
          quickReplyMenu();
      else
        messages.push({
          type: "text",
          text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏±‡∏î",
          quickReply: quickReplyMenu(),
        });
      await replyMessage(replyToken, messages);
      continue;
    }

    if (ev.type === "message" && ev.message.type === "location") {
      const meta = getUserMeta(userId);
      const messageId = ev.message.id;
      if (meta?.lastEventId === messageId) continue;

      const loc = ev.message;
      const messages = await handleLocation(
        userId,
        loc.latitude,
        loc.longitude,
        loc.address || loc.title
      );
      upsertUserMeta(userId, { lastEventId: messageId });
      if (messages.length === 0)
        messages.push({
          type: "text",
          text: "‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß",
          quickReply: quickReplyMenu(),
        });
      else if (messages[messages.length - 1].type === "text")
        (messages[messages.length - 1] as LineMessageText).quickReply =
          quickReplyMenu();
      else
        messages.push({
          type: "text",
          text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏•‡∏±‡∏î",
          quickReply: quickReplyMenu(),
        });
      await replyMessage(replyToken, messages);
      continue;
    }
  }

  return NextResponse.json({ ok: true });
}
